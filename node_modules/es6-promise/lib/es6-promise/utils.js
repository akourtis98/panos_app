export function objectOrFunction(x) {
<<<<<<< HEAD
  let type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
=======
  return typeof x === 'function' || (typeof x === 'object' && x !== null);
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
}

export function isFunction(x) {
  return typeof x === 'function';
}

export function isMaybeThenable(x) {
<<<<<<< HEAD
  return x !== null && typeof x === 'object';
}

let _isArray;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = x => Object.prototype.toString.call(x) === '[object Array]';
}

export const isArray = _isArray;
=======
  return typeof x === 'object' && x !== null;
}

var _isArray;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

export var isArray = _isArray;
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
