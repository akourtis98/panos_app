import {
  invokeCallback,
  subscribe,
  FULFILLED,
  REJECTED,
  noop,
  makePromise,
  PROMISE_ID
} from './-internal';

import { asap } from './asap';

export default function then(onFulfillment, onRejection) {
<<<<<<< HEAD
  const parent = this;

  const child = new this.constructor(noop);
=======
  var parent = this;

  var child = new this.constructor(noop);
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

<<<<<<< HEAD
  const { _state } = parent;

  if (_state) {
    const callback = arguments[_state - 1];
    asap(() => invokeCallback(_state, child, callback, parent._result));
=======
  var state = parent._state;

  if (state) {
    var callback = arguments[state - 1];
    asap(function(){
      invokeCallback(state, child, callback, parent._result);
    });
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}
