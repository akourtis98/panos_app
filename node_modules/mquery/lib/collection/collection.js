'use strict';

/**
 * methods a collection must implement
 */

var methods = [
<<<<<<< HEAD
=======
<<<<<<< HEAD
    'find'
  , 'findOne'
  , 'update'
  , 'updateMany',
  , 'updateOne'
  , 'replaceOne'
  , 'remove'
  , 'count'
  , 'distinct'
  , 'findAndModify'
  , 'aggregate'
  , 'findStream'
  , 'deleteOne'
  , 'deleteMany'
=======
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
  'find',
  'findOne',
  'update',
  'updateMany',
  'updateOne',
  'replaceOne',
  'remove',
  'count',
  'distinct',
  'findAndModify',
  'aggregate',
  'findStream',
  'deleteOne',
  'deleteMany'
<<<<<<< HEAD
=======
>>>>>>> 0f49b6b741d7ccdaba3978328fe07a9401b1b6cd
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
];

/**
 * Collection base class from which implementations inherit
 */

<<<<<<< HEAD
function Collection() {}
=======
<<<<<<< HEAD
function Collection () {}
=======
function Collection() {}
>>>>>>> 0f49b6b741d7ccdaba3978328fe07a9401b1b6cd
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a

for (var i = 0, len = methods.length; i < len; ++i) {
  var method = methods[i];
  Collection.prototype[method] = notImplemented(method);
}

module.exports = exports = Collection;
Collection.methods = methods;

/**
 * creates a function which throws an implementation error
 */

<<<<<<< HEAD
=======
<<<<<<< HEAD
function notImplemented (method) {
  return function () {
    throw new Error('collection.' + method + ' not implemented');
  }
=======
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
function notImplemented(method) {
  return function() {
    throw new Error('collection.' + method + ' not implemented');
  };
<<<<<<< HEAD
=======
>>>>>>> 0f49b6b741d7ccdaba3978328fe07a9401b1b6cd
>>>>>>> f09d3ae3d6463bb3bc841a1f35ac01942f76623a
}
